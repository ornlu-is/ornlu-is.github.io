<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Luís Franco</title><link>https://ornlu-is.github.io/</link><description>This is my cool site</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sun, 30 Jul 2023 16:37:43 +0100</lastBuildDate><atom:link href="https://ornlu-is.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>CIDRs and how they are handled by different systems</title><link>https://ornlu-is.github.io/go_postgres_cidr_mismatch/</link><pubDate>Sun, 30 Jul 2023 16:37:43 +0100</pubDate><author>Luís Franco</author><guid>https://ornlu-is.github.io/go_postgres_cidr_mismatch/</guid><description>I came across an interesting bug in the past few days. I had a very simple Go program that had a single purpose: it would take some user input, process that input, and then write it to a database. However, the program would sometimes fail, when given input that apparently was valid. And I thought that this bug was interesting enough to write about it, so here we are.
Understanding CIDR notation Before diving into the actual bug, it is fundamental that we understand CIDR notation.</description></item><item><title>Detecting Vulnerabilities in Go Code</title><link>https://ornlu-is.github.io/go_detecting_vulnerabilities/</link><pubDate>Tue, 25 Jul 2023 22:29:46 +0100</pubDate><author>Luís Franco</author><guid>https://ornlu-is.github.io/go_detecting_vulnerabilities/</guid><description>When writing software, one might, accidentally (or not), ship the software with vulnerabilities, which are broadly defined as flaws or weaknesses in code that can be exploited by an attacker. We do not want to have those in our Go code so we need some way of minimizing the number of vulnerabilities our code has. Fortunately there are tools built by the Go community and team that can be leveraged for this.</description></item><item><title>Go Design Patterns: Functional Options</title><link>https://ornlu-is.github.io/go_design_pattern_functional_options/</link><pubDate>Thu, 20 Jul 2023 22:19:24 +0100</pubDate><author>Luís Franco</author><guid>https://ornlu-is.github.io/go_design_pattern_functional_options/</guid><description>The Functional Options pattern is a rather elegant manner of implementing a Golang struct constructor that allows for custom default values, which means that users of the API we are implementing will only need to specify the struct attribute values that the users deem that shouldn&amp;rsquo;t take their default values.
For our example, let us consider the very simple use case where we have a package named person containing a Person struct, which will look like this:</description></item><item><title>Slim Docker Images via Build-step Containers</title><link>https://ornlu-is.github.io/slim_docker_images/</link><pubDate>Sat, 15 Jul 2023 17:48:07 +0100</pubDate><author>Luís Franco</author><guid>https://ornlu-is.github.io/slim_docker_images/</guid><description><![CDATA[Docker images are supposed to be as small as possible, containing only what is absolutely required for the application inside them to run. In this post, I&rsquo;ll go over build-step containers and how to use them with Docker. For that matter let us consider an example Go application, nothing fancy, like the one given by the code snippet below:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 package main import ( &#34;fmt&#34; &#34;net/http&#34; ) func rootPathHandler(w http.]]></description></item></channel></rss>