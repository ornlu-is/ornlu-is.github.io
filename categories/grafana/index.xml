<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Grafana - Category - Luís Franco</title><link>https://ornlu-is.github.io/categories/grafana/</link><description>Grafana - Category - Luís Franco</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 11 Aug 2023 11:46:41 +0100</lastBuildDate><atom:link href="https://ornlu-is.github.io/categories/grafana/" rel="self" type="application/rss+xml"/><item><title>Hooking Promtail, Loki, and Grafana to your Docker Compose stack</title><link>https://ornlu-is.github.io/docker_compose_promtail_loki_grafana/</link><pubDate>Fri, 11 Aug 2023 11:46:41 +0100</pubDate><author>Luís Franco</author><guid>https://ornlu-is.github.io/docker_compose_promtail_loki_grafana/</guid><description>When testing software locally, one of the main tools at a software engineer&amp;rsquo;s disposal is Docker, more particularly, the Docker Compose tool. This tool allows engineers to define and run a multi-container setup using YAML files. The vast majority of software produces a form of output known as logs, which provide information on what is happening in a running application, such as errors, possible warnings, general information, and more.
The issue with inspecting Docker Compose log messages When you run a Docker Compose setup locally, you&amp;rsquo;ll usually see all container logs being printed in rapid succession in your terminal, and, depending on the amount of logs your multi-container stack produces, this might be very difficult to navigate, reason about, and correlate log messages from different containers.</description></item></channel></rss>