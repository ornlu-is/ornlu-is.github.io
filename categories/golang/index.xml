<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Golang - Category - Luís Franco</title><link>https://ornlu-is.github.io/categories/golang/</link><description>Golang - Category - Luís Franco</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 25 Jul 2023 22:29:46 +0100</lastBuildDate><atom:link href="https://ornlu-is.github.io/categories/golang/" rel="self" type="application/rss+xml"/><item><title>Detecting Vulnerabilities in Go Code</title><link>https://ornlu-is.github.io/go_detecting_vulnerabilities/</link><pubDate>Tue, 25 Jul 2023 22:29:46 +0100</pubDate><author>Luís Franco</author><guid>https://ornlu-is.github.io/go_detecting_vulnerabilities/</guid><description>When writing software, one might, accidentally (or not), ship the software with vulnerabilities, which are broadly defined as flaws or weaknesses in code that can be exploited by an attacker. We do not want to have those in our Go code so we need some way of minimizing the number of vulnerabilities our code has. Fortunately there are tools built by the Go community and team that can be leveraged for this.</description></item><item><title>Go Design Patterns: Functional Options</title><link>https://ornlu-is.github.io/go_design_pattern_functional_options/</link><pubDate>Thu, 20 Jul 2023 22:19:24 +0100</pubDate><author>Luís Franco</author><guid>https://ornlu-is.github.io/go_design_pattern_functional_options/</guid><description>The Functional Options pattern is a rather elegant manner of implementing a Golang struct constructor that allows for custom default values, which means that users of the API we are implementing will only need to specify the struct attribute values that the users deem that shouldn&amp;rsquo;t take their default values.
For our example, let us consider the very simple use case where we have a package named person containing a Person struct, which will look like this:</description></item></channel></rss>